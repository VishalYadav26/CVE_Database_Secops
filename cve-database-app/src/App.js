import React, { useState } from 'react';
import { Table, Button, Modal, Form } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';

const cveData = [
  {
    "CVEID": "CVE-2021-32628",
    "Severity": "HIGH",
    "CVSS": 7.5,
    "AffectedPackages": "redis-server, redis-tools",
    "CWEID": "CWE-190"
  },
  {
    "CVEID": "CVE-2016-1585",
    "Severity": "CRITICAL",
    "CVSS": 9.8,
    "AffectedPackages": "apparmor, libapparmor1",
    "CWEID": "CWE-254"
  },
  {
    "CVEID": "CVE-2021-20308",
    "Severity": "CRITICAL",
    "CVSS": 9.8,
    "AffectedPackages": "htmldoc, htmldoc-common",
    "CWEID": "CWE-190"
  },
  {
    "CVEID": "CVE-2021-4048",
    "Severity": "CRITICAL",
    "CVSS": 9.1,
    "AffectedPackages": "libblas3",
    "CWEID": "CWE-125"
  },
  {
    "CVEID": "CVE-2022-36227",
    "Severity": "CRITICAL",
    "CVSS": 9.8,
    "AffectedPackages": "libarchive13",
    "CWEID": "CWE-476"
  },
  {
    "CVEID": "CVE-2021-3697",
    "Severity": "HIGH",
    "CVSS": 7,
    "AffectedPackages": "grub-common, grub-pc, grub-pc-bin, grub2-common",
    "CWEID": "CWE-787"
  },
  {
    "CVEID": "CVE-2021-38091",
    "Severity": "HIGH",
    "CVSS": 8.8,
    "AffectedPackages": "libavcodec58, libavutil56, libswresample3",
    "CWEID": "CWE-190"
  },
  {
    "CVEID": "CVE-2016-2781",
    "Severity": "MEDIUM",
    "CVSS": 6.5,
    "AffectedPackages": "coreutils",
    "CWEID": "CWE-20"
  },
  {
    "CVEID": "CVE-2016-9802",
    "Severity": "MEDIUM",
    "CVSS": 5.3,
    "AffectedPackages": "bluez, libbluetooth3",
    "CWEID": "CWE-119"
  },
  {
    "CVEID": "CVE-2019-1563",
    "Severity": "LOW",
    "CVSS": 3.7,
    "AffectedPackages": "libnode72",
    "CWEID": "CWE-327"
  }
];



const App = () => {
  const [cveRecords, setCveRecords] = useState(cveData);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editedIndex, setEditedIndex] = useState(null);
  const [viewedCve, setViewedCve] = useState(null);
  const [deleteIndex, setDeleteIndex] = useState(null);
  const [newCve, setNewCve] = useState({
    CVEID: '',
    Severity: '',
    CVSS: '',
    AffectedPackages: '',
    CWEID: '',
  });

  const handleAddCve = () => {
    // Validate input fields
    if (
      newCve.CVEID &&
      newCve.Severity &&
      newCve.CVSS &&
      newCve.AffectedPackages &&
      newCve.CWEID
    ) {
      setCveRecords([...cveRecords, newCve]);
      setShowAddModal(false);
      setNewCve({
        CVEID: '',
        Severity: '',
        CVSS: '',
        AffectedPackages: '',
        CWEID: '',
      });
    } else {
      alert('Please fill in all required fields');
    }
  };

  const handleEditCve = (index) => {
    setEditedIndex(index);
    setNewCve(cveRecords[index]);
    setShowEditModal(true);
  };

  const handleSaveEdit = () => {
    // Validate edited fields
    if (
      newCve.CVEID &&
      newCve.Severity &&
      newCve.CVSS &&
      newCve.AffectedPackages &&
      newCve.CWEID
    ) {
      const updatedCveRecords = [...cveRecords];
      updatedCveRecords[editedIndex] = newCve;
      setCveRecords(updatedCveRecords);
      setShowEditModal(false);
      setEditedIndex(null);
      setNewCve({
        CVEID: '',
        Severity: '',
        CVSS: '',
        AffectedPackages: '',
        CWEID: '',
      });
    } else {
      alert('Please fill in all required fields');
    }
  };

  const handleConfirmDelete = () => {
    if (deleteIndex !== null) {
      const updatedCveRecords = [...cveRecords];
      updatedCveRecords.splice(deleteIndex, 1);
      setCveRecords(updatedCveRecords);
      setDeleteIndex(null);
    }
  };

  return (
    <div className="container mt-4">
      <h2>CVE Database</h2>
      <Table striped bordered hover>
        <thead>
          <tr>
            <th>CVE-ID</th>
            <th>Severity</th>
            <th>CVSS</th>
            <th>Affected Packages</th>
            <th>CWE-ID</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {cveRecords.map((cve, index) => (
            <tr key={index}>
              <td>{cve.CVEID}</td>
              <td>{cve.Severity}</td>
              <td>{cve.CVSS}</td>
              <td>{cve.AffectedPackages}</td>
              <td>{cve.CWEID}</td>

              <td>
                <Button variant="info" size="sm" onClick={() => setViewedCve(cve)}>
                  View
                </Button>{' '}
                <Button variant="primary" size="sm" onClick={() => handleEditCve(index)}>
                  Edit
                </Button>{' '}
                <Button variant="danger" size="sm" onClick={() => setDeleteIndex(index)}>
                  Delete
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      <Button variant="success" onClick={() => setShowAddModal(true)}>
        Add CVE
      </Button>

      <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Add CVE Record</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="formCVEID">
              <Form.Label>CVE-ID</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CVE-ID"
                value={newCve.CVEID}
                onChange={(e) => setNewCve({ ...newCve, CVEID: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formSeverity">
              <Form.Label>Severity</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter Severity"
                value={newCve.Severity}
                onChange={(e) => setNewCve({ ...newCve, Severity: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formCVSS">
              <Form.Label>CVSS</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CVSS"
                value={newCve.CVSS}
                onChange={(e) => setNewCve({ ...newCve, CVSS: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formAffectedPackages">
              <Form.Label>Affected Packages</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter Affected Packages"
                value={newCve.AffectedPackages}
                onChange={(e) => setNewCve({ ...newCve, AffectedPackages: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formCWEID">
              <Form.Label>CWE-ID</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CWE-ID"
                value={newCve.CWEID}
                onChange={(e) => setNewCve({ ...newCve, CWEID: e.target.value })}
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleAddCve}>
            Save
          </Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Edit CVE Record</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="formCVEID">
              <Form.Label>CVE-ID</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CVE-ID"
                value={newCve.CVEID}
                onChange={(e) => setNewCve({ ...newCve, CVEID: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formSeverity">
              <Form.Label>Severity</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter Severity"
                value={newCve.Severity}
                onChange={(e) => setNewCve({ ...newCve, Severity: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formCVSS">
              <Form.Label>CVSS</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CVSS"
                value={newCve.CVSS}
                onChange={(e) => setNewCve({ ...newCve, CVSS: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formAffectedPackages">
              <Form.Label>Affected Packages</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter Affected Packages"
                value={newCve.AffectedPackages}
                onChange={(e) => setNewCve({ ...newCve, AffectedPackages: e.target.value })}
              />
            </Form.Group>

            <Form.Group controlId="formCWEID">
              <Form.Label>CWE-ID</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter CWE-ID"
                value={newCve.CWEID}
                onChange={(e) => setNewCve({ ...newCve, CWEID: e.target.value })}
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowEditModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSaveEdit}>
            Save
          </Button>
        </Modal.Footer>
      </Modal>
            <Modal show={viewedCve !== null} onHide={() => setViewedCve(null)}>
        <Modal.Header closeButton>
          <Modal.Title>CVE Details</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {viewedCve && (
            <div>
              <p><strong>CVE-ID:</strong> {viewedCve.CVEID}</p>
              <p><strong>Severity:</strong> {viewedCve.Severity}</p>
              <p><strong>CVSS:</strong> {viewedCve.CVSS}</p>
              <p><strong>Affected Packages:</strong> {viewedCve.AffectedPackages}</p>
              <p><strong>CWE-ID:</strong> {viewedCve.CWEID}</p>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setViewedCve(null)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
      <Modal show={deleteIndex !== null} onHide={() => setDeleteIndex(null)}>
      <Modal.Header closeButton>
        <Modal.Title>Delete CVE Record</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>Are you sure you want to delete this CVE record?</p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={() => setDeleteIndex(null)}>
          Cancel
        </Button>
        <Button variant="danger" onClick={handleConfirmDelete}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>


    </div>
  );
};

export default App;